#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define IT 10
#define MOD (IT / 10)

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

int main()
{
	Cryptosystem cs("107228898178321381361734517891557093445451101557694931159844844084553348566460497503036948996181257459973944542790735660003181470172132474322383099907436095652782454335389506916846223393885169493399160625540990416994961695718772968318937377375532546618307395557730983599727392806332154396510925997030958729809",8,{"1530285295931648096509482399079140977761404929038645024381815548092161925947601114133892549179409474496421638688067754441195414969976778919803969431818327492250349024159295490698064945456331370728979993633395951992482814372725261374216601477680771826828527242990260568219837444512646679327566655239762361660117366593832048825107099241476102636366888876771627978441811992145497532882524745941479340812095709525300588754190165526581500331649145616628597727805806873258415252371851666254160285724698975647901333377733441759492969625581461580310315848464682146313598068751835410283559755808311250745730803108331452100204","5409964530414023949782023571121319273133295175300336423922499474875626631151396212801942209028261117253425093725380555181501825369608477069317854368547903674555132431168493392774103245631126672002297247911593918479370354157921062438227591980118322715724957821378727716154036284537205426872533890584869250457755672228136351368116618343971337405922273902653108485281739524066044587375514753863412760316454590983885030354297208139303646138866077579661682237912827885218355295127053130735880639860113395973188062817588768889644197327835201524709997760438743049350696231611396585342734865539764710276792332674575853681916","11306320697531755609483345583374693643989455904500798026946159048138246371361898136842772234969354728488429101601669276261039957352303939185240365252912536514195636663151396712742445899598676678274391624987882151338928129830755605963070666110185633466437672401121812036906556138180100682811557737122826253503967989186365536168467814868000766724263274645090477285952161693864024386488019746889797548496661153029005419512546287456218942717991517823393065668667899475502699538847251875777586644319152492705946104940014834716362617996022885577450069913682284518660168514242932713400722095194908048302436331210536678957260","4897473769003878409928458118511025968725791058082089259889738983670200419997600542803909631812735587877024278496762562493811987847306143207718503218646825519834240067430689805536969705831683596556928595177523995144832885685454296607492907449068460903131338117093257053742500694224090912579729745833194278777929333750229436639383515184798707643126822448882416140962126623105884677903611095437115658012960449154334812881458837613490102596220457711738047846622441674535214296593122470633114857985392522813649155279770215404221297057240309993600566994584601059076646683377937614669651984992889578947511744204949008787911","9149078106826232664044859558819373228934044534507921441346411005601288788616764274967233695918678654632590896444018253869426420613521418001075921451470364730705546583079719780620050247358963487580576957514141138228865021296432242908745729242440867049858732189742998212289674390386314039534770099730075394957306585367099465444860733418299315002854732474012154756044477672841779474661866304056891378454647227762533946509463018505518059056626480318558611814173337464234194556600447439790179868848060801112429254769526044154479322788303584374840769400675420097258738073531681021934667225672020251835700819741609477590310","6224163943896050114274167005748903768146411310942604781884730966010961238329296590398345869041126767104843363341014604461843909490186826182376675594671639787546037790329661528797908825113145747591043534728320159556250965030029328278610515339495705507262439517469463195773176588510659323295173636409521328915343534253678456396331314547355460560340753978067405857847868637312109695180710992563704309265137521052181768615020055789038816303311153478256880366471009942291203411885580900184692579534784120089608177658419397510468355709979795258527162655618581053515392229887178196394346129692699185457560101238833940553312","7294311435649937353325822608871400875362108828335716172877834841431869722022290467068530521923623085694169743965971889141049544916315290946075108621217347444223152657229102162172960772982175661056006650179526592108631233119317635652531048966346522135045995543658005640559505879015532819770755115824015181747307765777815226066364883689371503177082913550316117247598155130055776017345976013665931218569877942830406920819811482932691433283878346468264523624897388138159761368971405935302109717766459101918093794368319037307353980571189506638652894979810976849883182727719158806569820263328286540226057959310967532448321","4409279019444639900611826562817899561373507322543648979939669581588854906209812288021612592057262002798223065598842202087247340135254908457870329832143995223485521427294671556217161173224709430472281366529791590766977232621314936404944627848819422449610686777616820794478117562751724088939444731642378907712618093289057454026511719649253321863043108874676756923951251137343926975756063336490045027825969227411840929001125944172458471419952055098327422088108762572579582249870364248335022582763213032553869493757612066651416078328203238046152039106185901799523231684293787249952165312061561007258683611465821646883820","9244811591243203912353963134398781425280925266575576549412589893926866918657002911846484161214616733853935538024591248013214353481292933460309468409877084063264975898807579871519367526258656262434754545573754548240738660830673463127103855464303859593437772379284455577358892260616645660087981709999199915181641623498694667212289633539218691494305782096226011809049522439630675227943244089658705257127248669413832723694280533594703414927361374147140608681097732336016990544222465243758180775688618817389226980551498489255823699941120176349855113105568685880896736034453394880322568348382742445349508238813570088323551"}, libgDir, gFunctionName,"9745539581947977714495100081515973394335551278943267950785088479753724176516886275543004568984364285278071614528404792431363187291423565960439940072934398087550971910108077379203687357239021116795720680995541265899558330683087798698071562012631816508527627953512886318903863844895765620718880888604399809432433271422431096085429204490600575925546938179109203711377753220393432533763753977933049130079292670281057374971738504205249344463673736728094119914089259138558746353983975367740180561359219637222478380518959090564586540174262744525522557677299141085177121245760219491354804795044255406421506277573650607000483");
	SecureInt a ("3928443740906366562028866564836530320227328321069534859273425085317622276348198985474939266435603868687887476664475262242381738553825748487923224123373124206798808735899729270884659326868000020303740410064806279313984630479832016528830470355681661527717086357126216106087674194634074366826865729313916747198678404846724188539314464513588651535881598036231707473676975690352714011410810322615568223485205431889546175475676977096124578565589297209113780806172778780182457192396533617015988248830087962641104774990932335288684124058151073157916300066820138682766287689800410004728339160734058526420123461809810591802983",cs);
	SecureInt b ("4433458007390637457854493435747045912916949899884165359943242603589844208747631772146362359272651924839938254622208755731424964060973428535421940036139315052977171955295492397034820865761621367447049521705127519801659460912450279539381322849979578659155346015478774415328332918323280965235422364181332823197360436224637479532074581362698337062269603329929432982271197203031201468681773425024692519710202383191442192548940635879790268026543607451727640610597793626355666855113571296570922285779073561149284054474921605318877027805525035614728237572903627498026857488571469220372605919931749667992021721127470072476830",cs);
	SecureInt c;
	unsigned bi = 1;

	for (int i = 0; i < IT; i++)
	{
		//a += b;
		//a -= b;
		a *= b;
		//a <<= b;
		//a <<= bi;
		//a >>= b;
		//a >>= bi;
		//a = SecureInt(bi,cs);
		//a = SecureInt::G(a,b);
		//a = a == b;
		//a = a != b;
		//a = a > b;
		//a = a < b;
		//a = a >= b;
		//a = a <= b;
		
		if ((i % MOD) == 0) cout << i << "\n";
		//cout << i << "\n";
	}
	cout << a.str() << "\n";

	return 0;
}

