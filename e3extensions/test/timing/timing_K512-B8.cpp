#include <iostream>
#include "../../src/e3extensions/secureint.h"
#include <papi.h>

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

int main()
{
	long long s, e;

	s = PAPI_get_real_cyc();
	for (int i = 0; i < 1000000; i++) asm volatile("nop");
	e = PAPI_get_real_cyc();
	cout << "For loop: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	Cryptosystem cs("11145119344260717343222299810637669107879420814760431086451603477094080868900798383205035597416448343212740028209212425246479892255447743997322192446865321","8","86511798436605938533073958441205962994734367731416532729461066282077867083447435810693472896521555645625092596267831089770650707047527971050809377714175913098630885469573575509275642622319305456960212385254852844072248115818708289988204759390646964935032562295152566009627020658376396565889445141735024712772","50601300936834060424403405147922720935309606432699315553565235205422669254539128450633253943180242748218613296638408800551830426576443336237267211815010071750602720306533410643766908470678394555322062896648228770387640732120708139569767556102211532568413856333617357239455977609536387426508538872234904046925","32007023627171404086903602215239219236417800370511360587543512907899806877334949471341004015008395987819894209460017879111349045015654633952548412563362991094800415214164206929909026069732568818715845438453548724454401839705594004863106268387156627689539851009253588836492641572706216941856022738275104788457", libgDir, gFunctionName);
	e = PAPI_get_real_cyc();
	cout << "Cryptosystem cs: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt a("77760056085609113096828285784245787867838944242635900308139044432175369063367003725131119469510730005801715414956722371743109568078751541531586824509945166698805730092378382702548251419260857293255216058948486443105163020640592005004569611508223604704799467243790746852622931355994172109282935665363633937061",cs);
	e = PAPI_get_real_cyc();
	cout << "SecureInt a: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt b("76914178674137713721029759170386992248307700580366491499809197294781475583209543271250711767257179173524533082689620109419332093859593272106375956443824000615248445921088928400194870196710707867569771412604786046038169942282250710142801581461385591568856776618477819346414410887645284095306438925641769727778",cs);
	e = PAPI_get_real_cyc();
	cout << "SecureInt b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt c;
	e = PAPI_get_real_cyc();
	cout << "SecureInt c: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = a + b;
	e = PAPI_get_real_cyc();
	cout << "c = a + b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = a * b;
	e = PAPI_get_real_cyc();
	cout << "c = a * b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = SecureInt::G(a,b);
	e = PAPI_get_real_cyc();
	cout << "c = G(a,b): " << (e-s) << " cycles\n";	

	return 0;
}

