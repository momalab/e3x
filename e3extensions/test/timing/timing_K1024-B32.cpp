#include <iostream>
#include "../../src/e3extensions/secureint.h"
#include <papi.h>

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

int main()
{
	long long s, e;

	s = PAPI_get_real_cyc();
	for (int i = 0; i < 1000000; i++) asm volatile("nop");
	e = PAPI_get_real_cyc();
	cout << "For loop: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	Cryptosystem cs("152106453227469838479494887240008684243937989799470134366421289699008696631701711963116792033200119705294708530516145001378430727106921596088406916045710128199529026811766334492109784121935277287988448131153281774960304951066931520027028490081996673417500270087685578008558299208104568409235965690202778401861","32","10060435924231051184161125269626888270166909327144353916554983235158438653528041243562721408845677034764324858366623800235331892146007615449315843175839975918794162154845452425918703196554191322872142379150213040300150072652720471404933004223657706488199069383801382622616641981932348646788730524764700063179143403110621219468341445577377399770297636749535000238757628379050405290605793047683827115787898388309837189638681496889035758635990043143878223601754754925011936527849845678207656853501145743687005844222965508866470539849553882429694834241162234280645364485683516503455621974499575531331464960189880298610043","9123383911102110651869261386075587580358958381342663234338005293574753505008685063024742513156158320351891492483368086718610908810586613422078190878310388636487176022309022870091540426411209281525471942845594691469939490226346276825122532908088826494153211755756726735113884198028383382253430419024731076852829210898770627468628130652187464039535807154605064895697816855340743537195557677014494003432724251437903081454388530652389468778535490318747631782784251958248758771309680868594457421559910077334562835380084576369663419682058263106656270751690333733094765325579179214386367132407048599111881147361851510733059","12519735645382132567792895420019888959591735612301661678308850559935436008232086445621430925253171407660414936356506229806127577679901120803210378407790272654578359198739197860399968890199146962825564846655102192529379026469883970979638411749345690690728235252779409080456962114357507805355019961321372429083022047838026596041412895213218264839228606552709223236693646398966232261406003321787507127144731242415090808093129129177975572427787792743428647009177449707243768617545196979923043157595156993527548499580607684062875765054576710971075756958521952645526893309090705855635384116347588646907328506126984239026573", libgDir, gFunctionName);
	e = PAPI_get_real_cyc();
	cout << "Cryptosystem cs: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt a("21958570463932989043188134983089478446887461161231693346351081782448684152031194414346539333630485897754545685158229670649403886488634089484391619805809910629853537165399300458068373203596318613886700610946143742736666896874132954582274723093667626797391819817122691806823492098149436350390976376199608030397824132216459611149741810143956826058515119603130441557599076262241404584039247592358779984938079791960680711771107748703947210395385695834302090048686497415895385256553148283273589099223754144032833011228874671326892028213439415153958352931364836361679328385174308105282602164205997286842927175329242823208284",cs);
	e = PAPI_get_real_cyc();
	cout << "SecureInt a: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt b("6558261822540023258933895919501369694771892221935846218105370582454196714485899654395952951027141832544125815462260720714345618729242636477952412661694138589352447121605944792390714948560041434659800066540222473817787845196093356163468019800271980386866821953645733440848813446540741308476538140901127372798538789428156166722133132505689799437033440067735441799133511202214173402853126316469655798192463608431933082445458494298964694156681714158323470550615604269774623905335188583332124547802861627376429099716341129997280170160115740266748457099148099519866558333590321133012034042794353467111276317604362839125177",cs);
	e = PAPI_get_real_cyc();
	cout << "SecureInt b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt c;
	e = PAPI_get_real_cyc();
	cout << "SecureInt c: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = a + b;
	e = PAPI_get_real_cyc();
	cout << "c = a + b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = a * b;
	e = PAPI_get_real_cyc();
	cout << "c = a * b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = SecureInt::G(a,b);
	e = PAPI_get_real_cyc();
	cout << "c = G(a,b): " << (e-s) << " cycles\n";	

	return 0;
}

