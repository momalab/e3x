#include <iostream>
#include "../../src/e3extensions/secureint.h"
#include <papi.h>

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

int main()
{
	long long s, e;

	s = PAPI_get_real_cyc();
	for (int i = 0; i < 1000000; i++) asm volatile("nop");
	e = PAPI_get_real_cyc();
	cout << "For loop: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	Cryptosystem cs("6022437947288187883679026472495644926550473446262403758532168649457042492325146238837506659825717472183704161067297942138200515231432041099670574206376577","16","19915706365382290132200921461515885599667685829284798413598006886457480228892093274335374912661099001047249448292294182418251678133200288611325607864730281972942027066892306364886292980400153536923661695876217174278908060146074821427793643557368054701958575229208646484679056797977298091727836362231248856912","24840097539500066246671601656798683685659054806737405841022677856172398263206426560161145936745393025676209768440843526921332013011187030384792832495156770144840943090730024751655995416841422308623315939272230722704147292960560877582866273508018529828563680333019335463184199813615865003263619067890787885981","1837943742241421116111569348477189793648326267462202384150888870822401245522451900750191526155909634466538529515597808237568002526257595495321419745605342569781108011413061734310033360235633267438096780644183324212027998494485117604189186197534330102864486971028486696130684398965262888290148515313083271572", libgDir, gFunctionName);
	e = PAPI_get_real_cyc();
	cout << "Cryptosystem cs: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt a("35842614712826559607971973695442810713457629384602797040820047594497324598689213443039338480876041412347919813273841279288711011165638021479771592433243357822068965235580106353325473019148783262706785331158000523330423314467990394915441576306111909544898993088955008249599676934056847376827780440234284536740",cs);
	e = PAPI_get_real_cyc();
	cout << "SecureInt a: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt b("27988497399024173828297454225404665963275038675116342286624417486845809834498924162468792573271324131878415886049603601586402615944109818284630052608484327316240541325839183664788216143335727375632105574632963243685091247878719088060205267768940282186386310543259668123024853861638136684786212035860305017447",cs);
	e = PAPI_get_real_cyc();
	cout << "SecureInt b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt c;
	e = PAPI_get_real_cyc();
	cout << "SecureInt c: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = a + b;
	e = PAPI_get_real_cyc();
	cout << "c = a + b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = a * b;
	e = PAPI_get_real_cyc();
	cout << "c = a * b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = SecureInt::G(a,b);
	e = PAPI_get_real_cyc();
	cout << "c = G(a,b): " << (e-s) << " cycles\n";	

	return 0;
}

